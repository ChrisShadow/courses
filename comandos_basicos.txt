Git: version controller software (back end), versiones de código. Metadata en el software.
indentificadore básicos:  
1-git config --global user.name
2-git config --global user.email
-------------------------------------------------------------------------------------------------------------------------------------
Git hub: servicio web de Git, front end.  
generador de llave ssh, protocolo de comunicación entre front (git hub) y back-end(git):
1-ssh-keygeb(or just until here) -t rsa -b 4096 -C "email" : chrisz (en git), no compartir
Varias nodos con git y sus respectivas ssh para git hub, para copiar (en git), 
2-clip <~/nombre_rsa.pub
Al crear repositorio, privado con una subscripción; para descargar el contenido, clonar con ssh a git: 
3-git clone enlace 
Para coincidir actualizaciones de la clonación entre escritorio y nube: reserved word (main) indicates where is the current 
location with futures changes, yet Permission denied (publickey)-> https://youtu.be/dxvnbKaszBw, 
4-git config --global --unset core.excludesfile
5-git config --global --unset user.email/name, 
6-git config --global --list. Once the problem is resolved, 
7-git status 
To save: 
8-git commit -am "explanation" (just locally); 
9-git push origin the target
to add a flile locally into remotely:
10-git add filename/foldername, 
11-git commit -am "", 
12-git push origin target
Now, remotely into locally: 
13-git fetch (descarga la metada), 
14-git pull origin main
Dos devs trabajando sobre un mismo archivo al mismo tiempo en el main(acceso secuencial a cada commit, método ineficiente). Entonces concepto Branch:
a partir del mismo contenido de commitments, generar branches para evitar inconvenientes y tener versiones hijas
En git: 
15-git branch nombre(crear); 
16-git checkout nombre(luego ir al); 
17-git check out -B nombre(crear e ir a la vez)